---
- name: prelude
  hosts: bionic
  environment: "{{ os_admin }}"
  any_errors_fatal: true
  tags:
    - prelude
    - part_a
  tasks:
    - name: check not already upgrade
      assert:
        that:
          - ansible_distribution_version != '18.04'

    - name: stop and lock vms
      include_role:
        name: cloudman
      with_items:
        - hype_list
        - hype_stop
        - hype_lock
      loop_control:
        loop_var: role_action
    - name: stop puppet
      become: yes
      command: /opt/puppetlabs/bin/puppet agent --disable "bionic upgrade"
    - name: stop nova-compute
      become: yes
      systemd:
        name: nova-compute
        state: stopped

- name: hypervisor xenial pre drl
  hosts: bionic
  tags:
    - pre-drl
    - part_a
  environment: "{{ proxy_env }}"
  any_errors_fatal: true
  tasks:
    - name: remove i386 arch, purge prefs
      include_role:
        name: pacman
      with_items:
        - remove_arch
        - purge_prefs
      loop_control:
        loop_var: role_action
      vars:
        arch: i386
    - name: cleanup old sources
      include_role:
        name: pacman
      with_items:
        - purge_sources
      loop_control:
        loop_var: role_action
      vars:
        old_source:
          - "dell"
          - "linux.dell.com.sources"
          - "midonet"
          - "midonet-openstack-integration"
          - "midonet-third-party"
          - "nectar-mitaka"
          - "nectar-newton"
          - "nectar-ocata"
          - "nectar-pike"
          - "openjdk-ppa"
          - "puppetlabs_pc1"
          - "qemu-libvirt-repo"
          - "ubuntu-cloud-archive"
    - name: pre-do-release dist upgrade
      include_role:
        name: pacman
      vars:
        role_action: patch_seq

- name: hypervisor xenial drl bionic
  hosts: bionic
  tags: drl
  environment: "{{ proxy_env }}"
  any_errors_fatal: true
  tasks:
    - name: drl
      include_role:
        name: drl

- name: hypervisor bionic post drl
  hosts: bionic
  environment: "{{ proxy_env }}"
  any_errors_fatal: true
  tags:
    - post-drl
    - part_b
  tasks:
    - name: gather bionic facts
      setup:
      failed_when: ansible_distribution_version != '18.04'

    - name: Update mlnx
      # will uninstall nova compute if it runs & requires bionic repos
      include_role:
        name: firmware
      vars:
        role_action: mlnx
      when:
        - ansible_p1p1 is defined
        - ansible_p1p1.module is search('mlx')
      tags:
        - firmware
        - mlnx_firmware
    - name: Update firmware
      include_role:
        name: firmware
      with_items:
        - install
        - update
      loop_control:
        loop_var: role_action
      when: ansible_virtualization_role == 'host'
      tags:
        - firmware
        - dell_firmware
    - name: flush handlers
      meta: flush_handlers

    - name: cleanup xenial sources
      include_role:
        name: pacman
      with_items:
        - purge_sources
      loop_control:
        loop_var: role_action
      vars:
        release: xenial

    - name: routine node config and update puppet
      include_role:
        name: baremetal
      with_items:
        - pre_config
        - reinstall
      loop_control:
        loop_var: role_action

    - name: enable puppet
      become: yes
      command: /opt/puppetlabs/bin/puppet agent --enable

    - name: run puppet to get bionic repos
      become: yes
      puppet:
      register: puppet_run_result
      ignore_errors: yes

    - name: post-do-release dist upgrade
      include_role:
        name: pacman
      vars:
        role_action: patch_seq
      when: puppet_run_result.failed

    #- install & start midolman
    #- install & start nova-compute
    - name: run puppet
      become: yes
      puppet:
      register: puppet_run_result
      when: puppet_run_result.failed

- name: postlude
  hosts: bionic
  environment: "{{ os_admin }}"
  any_errors_fatal: true
  tags:
    - postlude
    - part_b
  tasks:
    - name: system checks
      include_role:
        name: baremetal
      vars:
        role_action: check
        node_type: 'hypervisor'

    - name: Test "{{ ansible_play_batch }}"
      include_role:
        name: tempest
      vars:
        role_action: check
        tempest_test_hosts: "{{ ansible_play_batch }}"
      run_once: true
      tags: tempest

    - name: start and unlock vms
      include_role:
        name: cloudman
      with_items:
        - hype_unlock
        - hype_start
      loop_control:
        loop_var: role_action
